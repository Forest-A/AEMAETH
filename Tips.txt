1. Deleting useless commits:
git reset --soft HEAD~1
git push origin +main --force

This command moves the current branch's head pointer back by one commit (HEAD~1), effectively undoing the most recent commit.
The --soft flag ensures that the changes made in that commit are not lost; they remain in the working directory and are staged for commit.
This allows you to amend the commit if needed or simply remove it without losing any changes.

After resetting the commit locally, this command forcefully updates the remote repository's main branch to match your local branch.
The + sign before main indicates a forced update, which is necessary because the local branch has diverged from the remote branch after the reset.
The --force flag (--force or -f) is required to overwrite the remote branch with your local changes, 
effectively removing the unwanted commit from the remote repository as well.

2. Creating a file in local
git add example.txt
git add .
git commit -m "Add example.txt"
git push origin main
