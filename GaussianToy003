#include <iostream>
#include <TFile.h>
#include <TH1D.h>
#include <TF1.h>
#include <TCanvas.h>
#include <TMath.h>
#include <TMinuit.h>
#include <TRandom3.h>
#include <TStyle.h>
#include <TLegend.h>

// Generate Gaussian values and fill histogram
// Global pointer to the histogram
TH1D *globalHist = nullptr;
TRandom3 *gRand = new TRandom3(123);

// Generate Gaussian values and fill histogram
void GenerateGaussianValues(TH1D *hist, double amplitude, double mean, double stdDev){

	for (int ii = 0; ii < 1e4; ii++) {
		hist->Fill(gRand->Gaus(mean, stdDev));
	}
}

void fcn(int &npar, double *gin, double &ff, double *par, int iflag) {
    const TH1D *hist = (TH1D*) gDirectory->Get("hist"); // Always protect data with const!

    //Always check pointer first in such operations!
    if (hist == nullptr) {
        std::cerr << "Error: The histogram is not properly generated." << std::endl;
        return; // Exit the function if histogram is not found
    }

    const int nBins = hist->GetNbinsX();
    const double binWidth = hist->GetBinWidth(1);

    double chiSquare = 0.0;
    for (int ii = 1; ii <= nBins; ii++) {
        const double xx = hist->GetBinCenter(ii);
        const double generated = hist->GetBinContent(ii);
        const double fit = par[0] * TMath::Gaus(xx, par[1], par[2]) * binWidth;

        if (generated > 0) {
            chiSquare += TMath::Power((fit - generated), 2) / generated;
        }
    }
    ff = chiSquare;
}


void PerformSingleFit(TF1* fitFunc, double* outpar, double* err) {
    TMinuit Minuit(3);
    Minuit.SetFCN(fcn);

    double arglist[10];
    int ierflg = 0;

    arglist[0] = 1;
    Minuit.mnexcm("SET ERR", arglist, 1, ierflg);

    Minuit.mnparm(0, "Amplitude", outpar[0], 0.1, -1e3, 1e3, ierflg);
    Minuit.mnparm(1, "Mean", outpar[1], 0.1, -1e3, 1e3, ierflg);
    Minuit.mnparm(2, "Sigma", outpar[2], 0.1, -1e3, 1e3, ierflg);

    arglist[0] = 500;  // Maximum number of iterations
    arglist[1] = 1.0;  // Tolerance
    Minuit.mnexcm("MIGRAD", arglist, 2, ierflg);

    // Check convergence
    if (ierflg != 0) {
        std::cerr << "Minimization did not converge properly. Error code: " << ierflg << std::endl;
    }

    for (int ii = 0; ii < 3; ii++) {
        Minuit.GetParameter(ii, outpar[ii], err[ii]);
    }

    // Update the fit function parameters
    fitFunc->SetParameters(outpar[0], outpar[1], outpar[2]);
}

// Function to perform iterative fitting
void IterativeFit(TF1* fitFunc, const int iterations, double *outpar, double *err) {

    for (int ii = 0; ii < iterations; ii++) {
        std::cout << "Iteration " << ii + 1 << std::endl;
        PerformSingleFit(fitFunc, outpar, err);

        // Output the parameters after each iteration
        std::cout << "Parameters after iteration " << ii + 1 << ":"
                  << " Amplitude: " << outpar[0]
                  << ", Mean: " << outpar[1]
                  << ", Sigma: " << outpar[2] << std::endl;
    }
}

void PlotGaussianFit(TH1D *hist, TF1 *fitFunc) {
 
    TCanvas *c1 = new TCanvas("c1", "Gaussian Fit", 800, 600);
    gStyle->SetOptStat(0);
    hist->Draw();

    // Draw the fitted function on the canvas
    fitFunc->SetLineColor(kRed);
    fitFunc->SetNpx(1e5);
    fitFunc->Draw("same");

    // Save the canvas to a file
    c1->SaveAs("gaussian_fit001.png");

     // Clean up
    delete fitFunc;
    delete c1;
}

int main() {
    // const int nBins = 200;
    // double outpar[3] = {-400.0, -500.0, 100.0}; // Initial guesses
    // double err[3];
  
    TH1D *hist = new TH1D("hist", "Generated Gaussian Data", 200, -20.0, 20.0);
    TF1 *fitFunc = new TF1("fitFunc", "[0] * TMath::Gaus(x, [1], [2])", -1e4, 1e4);

    // Generate Gaussian values
    GenerateGaussianValues(hist, 1.0, 0.0, 1.0); // amp, mean, stdDev

    // Extract initial guesses from the hist
	int peakBin = hist->GetMaximumBin();   // Get the bin number of the maximum
	double peakContent = hist->GetBinContent(peakBin);  // Get the content (height) of the peak bin

	std::cout<<"!!!!!!!!!!!"<<peakContent<<std::endl;

	double mean = hist->GetMean();
	double stdDev =  hist->GetStdDev();

	double outpar[3] = {peakContent, mean, stdDev}; // Initial guesses
	double err[3];

    // Perform the iterative fitting
    int nIterations = 5;  // Number of iterations for fitting
    IterativeFit(fitFunc, nIterations, outpar, err);

    fitFunc->SetParameters(peakContent, mean, stdDev);


    PlotGaussianFit(hist, fitFunc);

    // Output the parameters with their errors
    const double stdevError = hist->GetRMSError();
    const double meanError = hist->GetMeanError();

    std::cerr << "mean error from GetMeanError is " << meanError << std::endl;
    std::cerr << "stdev error from GetRMSError is " << stdevError << std::endl;

     for(int ii=0; ii<3; ii++){
        std::cout << "Parameter " << ii << ": " << outpar[ii] 
                 << " with error: " << err[ii] << std::endl;    
    }

    return 0;
}
